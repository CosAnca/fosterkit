// ==========================================================================
// UTILITIES / SPACING
// ==========================================================================

// Utility classes to put specific spacing values onto elements, overriding any
// existing matching property declarations

// Settings
// ==============================================

// prettier-ignore
$spacing-properties: (
  m: margin,
  p: padding,
);

// prettier-ignore
$spacing-directions: (
  null: null,
  t: top,
  r: right,
  b: bottom,
  l: left,
  x: (
    l: left,
    r: right,
  ),
  y: (
    t: top,
    b: bottom
  )
);

// Tools (Private / Framework Only)
// ==============================================

@mixin _global-spacing-selector($property-alias, $direction-alias, $size) {
  // If we have a `null` direction, the implication is that we want to use the
  // respective property on "all" sides.
  // This can be used as `.u-m` or `.u-p`.
  @if ($direction-alias == null) {
    .u-#{$property-alias}-#{$size} {
      @content;
    }
  } @else {
    .u-#{$property-alias}#{$direction-alias}-#{$size} {
      @content;
    }
  }
}

@mixin _global-spacing-declaration($property, $direction, $value) {
  #{$property}#{if($direction != null, "-", null)}#{$direction}: $value !important;
}

// Base
// ==============================================

// The below loop will generate us a suite of classes:
//   .u-p-s {} // Applies padding: [small-spacing-value];
//   .u-mt-m {} // Applies margin-top: [medium-spacing-value];
//   .u-pl-l {} // Applies padding-left: [large-spacing-value];
//   .u-mx-s {} // Applies top and bottom small margin.

@each $property-alias, $property in $spacing-properties {
  @each $direction-alias, $direction in $spacing-directions {
    @each $size, $value in $global-spacing {
      $rem-value: null;

      @if ($value == 0) {
        $rem-value: 0;
      } @else {
        $rem-value: convert-to-rem($value);
      }

      @include _global-spacing-selector(
        $property-alias,
        $direction-alias,
        $size
      ) {
        // If the `$direction-key` has nested values, loop through them too
        // prettier-ignore
        @if type-of($direction) == map {
          @each $direction-key, $direction-value in $direction {
            @each $direction-value-key in $direction-value {
              @include _global-spacing-declaration($property, $direction-value-key, $rem-value);
            }
          }
        } @else {
          // prettier-ignore
          @include _global-spacing-declaration($property, $direction, $rem-value);
        }
      }
    }
  }

  // The below loop will generate us a suite of classes
  // to use with the margin property when its value
  // should be auto
  //   .u-mt-auto {} // Applies margin-top: auto;
  //   .u-my-auto {} // Applies margin-right and margin-left auto;

  @if ($property == "margin") {
    @each $direction-alias, $direction in $spacing-directions {
      @if ($direction != null) {
        .u-#{$property-alias}#{$direction-alias}-auto {
          // prettier-ignore
          @if type-of($direction) == map {
            @each $direction-key, $direction-value in $direction {
              @each $direction-value-key in $direction-value {
                @include _global-spacing-declaration($property, $direction-value-key, unquote("auto"));
              }
            }
          } @else {
            // prettier-ignore
            @include _global-spacing-declaration($property, $direction, unquote("auto"));
          }
        }
      } @else {
        .u-#{$property-alias}-auto {
          margin: auto;
        }
      }
    }
  }
}
