// =============================================================================
// OBJECTS / GRID
// =============================================================================

// The Grid object provides us with a column-style layout system. This file
// contains the basic structural elements, but classes should be complemented
// with width Utilities, for example:
//
// <div class="o-grid">
//   <div class="o-grid__item u-width-1/2@medium">...</div>
//   <div class="o-grid__item u-width-1/2@medium">...</div>
// </div>
//
// Our grid object also consumes the gutters of its container to allow easier
// grid nesting.
//
// Grid object creates a flexbox grid container using Adaptable grid-nest mixin.
//
// @include grid-nest;
//
// Output
// .element {
//   display: flex;
//   flex-wrap: wrap;
//   margin-left: -1.5rem; // $grid-gutter
//   margin-right: -1.5rem; // $grid-gutter
//   flex: 0 0 calc(100% + 3rem);
//   max-width: calc(100% + 3rem);
// }

.o-grid {
  @include grid-nest;
}

// Grid item creates the basics for the grid column layout
//
// @include grid-column(12, $adaptable-grid);
//
// Output
// .element {
//    flex-grow: 0;
//    flex-shrink: 0;
//    flex-basis: calc(100% - 3rem);
//    max-width: calc(100% - 3rem);
//    margin-left: 1.5rem;
// }

.o-grid__item {
  @include grid-column;
}

// Generate our regular, non-responsive classes.
@include _build-grid-system;

// Generate our responsive classes by looping over the series of breakpoints
// held by $mq-breakpoints inside _breakpoint.scss file.
@each $breakpoint, $value in $mq-breakpoints {
  @include mq($from: $breakpoint) {
    @include _build-grid-system(\@#{$breakpoint});
  }
}
