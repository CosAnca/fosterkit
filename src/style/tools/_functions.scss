// =============================================================================
// TOOLS / FUNCTIONS
// =============================================================================

// sass-lint:disable no-warn function-name-format

// Maps
// ==============================================
// map-get-deep()
// ------------------------------------
// Access nested map values.
// @author Hugo Giraudel (with modifications)
@function map-get-deep($map, $keys...) {
  @if map-has-keys-deep($map, $keys...) {
    @each $key in $keys {
      $map: map-get($map, $key);
    }
    @return $map;
  }

  @warn "Unknown keys of `#{$keys...}` in the defined map";
  @return null;
}

// map-has-keys-deep()
// ------------------------------------
// Check for keys in nested maps.
// @author Hugo Giraudel
@function map-has-keys-deep($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }
  @return true;
}

// font-family()
// ------------------------------------

// Function to get font-family instead of using `map-get`.
// Function to get font-family from `$global-font-families` instead of using `map-get`.
@function font-family($key) {
  @return map-get-deep($global-font-families, $key);
}

// font-size()
// ------------------------------------

// Function to get font-size instead of using `map-get`.
// Function to get font-size from `$text` instead of using `map-get`.
@function font-size($key, $variant: large) {
  @return map-get-deep($text, $key, $variant, font-size);
}

// line-height()
// ------------------------------------
// Function to get line-height from `$text` instead of using `map-get`.
@function line-height($key, $variant: large) {
  @return map-get-deep($text, $key, $variant, line-height);
}

// spacing()
// ------------------------------------
// Function to get spacing from $global-spacing-scale instead of using `map-get`.
@function spacing($key) {
  @return convert-to-rem(map-get-deep($global-spacing, $key));
}

// $colors map reader
// ===========================================

// Function to get color from `$colors` instead of using `map-get`.
//
// Usage:
//
//   .foo {
//     color: color(<key>);
//   }
//
@function color($key) {
  @return map-get-deep($colors, $key);
}

// Conversion
// ==============================================

// convert-to-rem()
// ------------------------------------

// Converts any `px` or `em` value to `rem`.
@function convert-to-rem($value, $base-font-size: $global-font-size) {
  @if unit($value) == "px" {
    @return (strip-unit($value / $base-font-size)) * 1rem;
  }

  @if unit($value) == "em" {
    @return strip-unit($value) * 1rem;
  } @else {
    @warn "Value must be em or px.";
  }
}

// convert-to-em()
// ------------------------------------
//
// Converts any `px` value to `em`.
//
// @param {Number} $px - value to convert
// @param {Number} $base-font-size ($global-font-size) - `<body>` font size
//
// @example scss
//  $font-size-in-ems: convert-to-em(16px);
//  p { font-size: convert-to-em(16px); }
//
// @requires $base-font-size
// @returns {Number}
//
@function convert-to-em($px, $base-font-size: $global-font-size) {
  @if unitless($px) {
    @warn "Assuming #{$px} to be in pixels, attempting to convert it into pixels.";
    @return convert-to-em($px * 1px, $base-font-size);
  } @else if unit($px) == em {
    @return $px;
  }
  @return ($px / $base-font-size) * 1em;
}

// strip-unit()
// ------------------------------------
//
// Function to remove the unit from a value
// i.e. strip-unit(20px) would return 20.
@function strip-unit($num) {
  @if type_of($num) == number {
    @return $num / ($num * 0 + 1);
  } @else {
    @warn "Value must be a number i.e. 12, 24px etc.";
  }
}

// str-replace()
// ------------------------------------
//
// Replace `$search` with `$replace` in `$string`
//
// @author Hugo Giraudel
// @param {string} $string - Initial string
// @param {string} $search - Substring to replace
// @param {string} $replace ('') - New value
// @return {string} - Updated string
// https://css-tricks.com/snippets/sass/str-replace-function/
@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// encode-svg()
// ------------------------------------
//
// Encode SVG to use them as data-uri for background-image
//
// Encodes <, > and #.
// https://codepen.io/tigt/post/optimizing-svgs-in-data-uris
//
// @param {string} $string - SVG code to encode
// @returns {string} - encoded String
@function encode-svg($string) {
  $string: str-replace($string, "<", "%3C");
  $string: str-replace($string, ">", "%3E");
  $string: str-replace($string, "#", "%23");

  @return $string;
}
