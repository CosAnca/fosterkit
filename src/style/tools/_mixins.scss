// =============================================================================
// TOOLS / MIXINS
// =============================================================================

// Making accessible hover/focus states simpler
// ===========================================

// Generate `:hover` and `:focus` styles in one go.
// http://www.456bereastreet.com/archive/201004/whenever_you_use_hover_also_use_focus/
@mixin hocus {
  &:hover,
  &:focus {
    @content;
  }
}

// Removing elements from view and/or ATs
// ===========================================

// Visually hide content, leaving it accessible to screenreaders and ATs.
// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility

// sass-lint:disable no-important

@mixin hide-visually {
  // Hiding elements visually overrides any matching property declarations
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  margin: -1px !important;
  padding: 0 !important;
  border: 0 !important;
  white-space: nowrap !important;
  overflow: hidden !important;
  clip: rect(0 0 0 0) !important;
}

// Completely hide content both visually from the screen, and from screenreaders
// and ATs.
@mixin hide-completely {
  // Hiding elements completely overrides any matching property declarations
  display: none !important;
}

// sass-lint:enable no-important

// Font smoothing
// ==============

// Controls the application of anti-aliasing when fonts are rendered on mac OS.

// sass-lint:disable no-vendor-prefixes

@mixin font-smoothing($value: antialiased) {
  @if $value == antialiased {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  } @else {
    -webkit-font-smoothing: subpixel-antialiased;
    -moz-osx-font-smoothing: auto;
  }
}

// Test size adjust
// ================

// Prevent certain mobile browsers from automatically zooming fonts.

@mixin text-size-adjust {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;
}

// sass-lint:enable no-vendor-prefixes

// Centerer
@mixin centerer($horizontal: true, $vertical: true) {
  position: absolute;

  @if $horizontal and $vertical {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  } @else if $horizontal {
    left: 50%;
    transform: translateX(-50%);
  } @else if $vertical {
    top: 50%;
    transform: translateY(-50%);
  }
}

// Overlay
@mixin overlay($color) {
  &::before {
    @include position(absolute, 0 0 0 0);
    background-color: $color;
    content: "";
  }
}

// ========================================================
// NEAT Grid System Extensions
// ========================================================

// Neat column item
@mixin grid-column-item($grid: $neat-grid) {
  $_grid-gutter: _retrieve-neat-setting($grid, gutter);

  float: _neat-float-direction($grid);
  margin-#{_neat-float-direction($grid)}: $_grid-gutter;
}

// Neat column width
@mixin grid-column-width($columns: null, $grid: $neat-grid) {
  $columns: _neat-column-default($grid, $columns);

  width: calc(#{_neat-column-width($grid, $columns)});
}

// Neat visual grid (better version)
// This mixin will render a visual grid based on our grid settings.
@mixin grid-visual-better($color: null, $grid: $neat-grid) {
  @if not $color {
    $color: _retrieve-neat-setting($grid, color);
  }

  $_grid-columns: _retrieve-neat-setting($grid, columns);
  $_grid-gutter: _retrieve-neat-setting($grid, gutter);
  $_grid-visual-column: "#{_neat-column-width($grid, 1)} + #{$_grid-gutter}";

  // sass-lint:disable indentation trailing-semicolon

  $_grid-visual:
    transparent,
    transparent $_grid-gutter,
    $color $_grid-gutter,
    $color calc(#{$_grid-visual-column}),
  ;

  // sass-lint:enable indentation trailing-semicolon

  background-image: repeating-linear-gradient(to right, $_grid-visual);
}

// Custom visual baseline
@mixin grid-visual-baseline($color: null, $baseline-grid: $visual-baseline) {
  @if not $color {
    $color: _retrieve-neat-setting($grid, color);
  }

  $_grid-baseline:
    transparent,
    transparent ($global-line-height * $global-font-size) - 1,
    $color ($global-line-height * $global-font-size) - 1,
    $color $global-line-height * $global-font-size,
  ;

  background-image: repeating-linear-gradient(to bottom, $_grid-baseline);
}

// Here we apply the visual grid to the before pseudo-element
// of the body tag.

// sass-lint:disable force-pseudo-nesting

@if variable-exists(visual-grid) and $visual-grid == true {
  body::before {
    @include grid-visual-better(
      rgba($visual-grid-color, $visual-grid-opacity),
      $neat-grid
    );
    display: inline-block;
    position: fixed;
    right: 0;
    left: 0;
    width: 100%;
    max-width: px2em($grid-max-width);
    height: 100%;
    margin: 0 auto;
    content: "";
    z-index: 4;
    pointer-events: none;
  }
}

// Here we apply the visual baseline to the after pseudo-element of body
@if variable-exists(visual-baseline) and $visual-baseline == true {
  body {
    position: relative;

    &::after {
      @include grid-visual-baseline(
        rgba($visual-baseline-color, $visual-baseline-opacity),
        $visual-baseline
      );
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      min-height: 100vh;
      content: "";
      z-index: 4;
      pointer-events: none;
    }
  }
}

// sass-lint:enable force-pseudo-nesting

// Custom media query max-width mixin
@mixin grid-media-max($breakpoint) {
  @media only screen and (max-width: px2em($breakpoint)) {
    @content;
  }
}
